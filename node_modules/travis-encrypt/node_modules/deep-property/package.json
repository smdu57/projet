{
  "name": "deep-property",
  "version": "1.1.0",
  "description": "Fetch, set, and test deeply nested object properties",
  "main": "index.js",
  "devDependencies": {
    "tap": ">=0.4.12"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mikattack/node-deep-property.git"
  },
  "homepage": "https://github.com/mikattack/node-deep-property",
  "keywords": [
    "accessor",
    "deep",
    "dotpath",
    "object",
    "property",
    "utility"
  ],
  "author": {
    "name": "Alex Mikitik"
  },
  "license": "BSD-2-Clause",
  "readme": "# deep-property\n\n\nEnables deep property manipulation and inspection without worrying about\nexceptions.\n\n\n## Usage\n\n```\nnpm install deep-property\n```\n\n```\nvar props = require('deep-property'),\n    sample = { };\n\nprops.set(sample, 'name.first', 'John');\nprops.set(sample, 'name.middle', 'C');\nprops.set(sample, 'name.last', 'Reilly');\nprops.set(sample, 'job.title', 'Actor');\n\nprops.get(sample, 'name.first');     // John\nprops.get(sample, 'name.middle');    // C\nprops.get(sample, 'name.last');      // Reilly\nprops.get(sample, 'job.title');      // Actor\n\nprops.remove(sample, 'name.middle'); // True\n\nprops.has(sample, 'name.first');     // True\nprops.has(sample, 'name.title');     // False\nprops.has(sample, 'job.title');      // True\nprops.has(sample, 'job.salary');     // False\n```\n\n```\n// Resulting object\n{\n  name: {\n    first:  'John',\n    last:   'Reilly'\n  },\n  job: {\n    title:  'Actor'\n  }\n}\n```\n\n\n## Paths\n\nThe `path` parameter of each function is dot-delimited string.  Everything\nbetween the dots is considered a property name.  Paths can be as long and\ncomplex as necessary, with the following constraints and assumptions:\n\n- Paths will not recognize array indexes.  Using a path like\n  'path.to.items[4].type' will include a lookup for an element\n  named `items[4]` (string) instead of an array element.\n- Calls using invalid paths will result in the following:\n    - `get`: `undefined`\n    - `set`: No values (including intermediates) set\n    - `has`: `false`\n    - `remove`: `false`\n- Paths with blank sections (`path.to..nothing` or `path.to.nothing.`)\n  will be considered invalid.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mikattack/node-deep-property/issues"
  },
  "_id": "deep-property@1.1.0",
  "dist": {
    "shasum": "c462ff310120d1fa89d6a11e5ceab24880e553bb"
  },
  "_from": "deep-property@^1.1.0",
  "_resolved": "https://registry.npmjs.org/deep-property/-/deep-property-1.1.0.tgz"
}
